# üçù Guia Completo do Projeto Philosophers

## üìö Conceitos Fundamentais

### O Problema do Jantar dos Fil√≥sofos
- **N fil√≥sofos** sentados em uma mesa circular
- **N garfos** (um entre cada par de fil√≥sofos)
- Cada fil√≥sofo precisa de **2 garfos** para comer
- A√ß√µes: **PENSAR** ‚Üí **PEGAR GARFOS** ‚Üí **COMER** ‚Üí **DORMIR** ‚Üí repetir

### Desafios
1. **Deadlock**: Todos pegam o garfo da esquerda simultaneamente ‚Üí ningu√©m consegue pegar o da direita
2. **Data Races**: M√∫ltiplas threads acessando/modificando dados compartilhados
3. **Starvation**: Um fil√≥sofo nunca consegue comer
4. **Sincroniza√ß√£o**: Detectar quando um fil√≥sofo morre

---

## üèóÔ∏è Arquitetura da Solu√ß√£o

### Estruturas de Dados

```c
t_data (cada fil√≥sofo)
‚îú‚îÄ‚îÄ philo_nbr       ‚Üí ID do fil√≥sofo (1 a N)
‚îú‚îÄ‚îÄ meal_nbr        ‚Üí Quantas vezes comeu
‚îú‚îÄ‚îÄ last_meal       ‚Üí Timestamp da √∫ltima refei√ß√£o
‚îú‚îÄ‚îÄ thread          ‚Üí Thread pthread
‚îú‚îÄ‚îÄ l_fork          ‚Üí Mutex do garfo esquerdo (pr√≥prio)
‚îú‚îÄ‚îÄ r_fork          ‚Üí Ponteiro para garfo direito (do vizinho)
‚îî‚îÄ‚îÄ vars            ‚Üí Ponteiro para vari√°veis globais

t_vars (dados globais)
‚îú‚îÄ‚îÄ n_philos        ‚Üí N√∫mero de fil√≥sofos
‚îú‚îÄ‚îÄ t_2die          ‚Üí Tempo m√°ximo sem comer (ms)
‚îú‚îÄ‚îÄ t_2eat          ‚Üí Tempo para comer (ms)
‚îú‚îÄ‚îÄ t_2sleep        ‚Üí Tempo para dormir (ms)
‚îú‚îÄ‚îÄ max_rounds      ‚Üí N√∫mero de refei√ß√µes necess√°rias (-1 = infinito)
‚îú‚îÄ‚îÄ how_many_r_full ‚Üí Contador de fil√≥sofos que completaram
‚îú‚îÄ‚îÄ philo_dead      ‚Üí Flag: algum fil√≥sofo morreu?
‚îú‚îÄ‚îÄ philos_full     ‚Üí Flag: todos comeram o suficiente?
‚îú‚îÄ‚îÄ philosophers[200] ‚Üí Array de todos os fil√≥sofos
‚îú‚îÄ‚îÄ start_time      ‚Üí Timestamp do in√≠cio da simula√ß√£o
‚îî‚îÄ‚îÄ sync            ‚Üí Mutex para sincroniza√ß√£o global
```

---

## üîÑ Fluxo de Execu√ß√£o

### 1Ô∏è‚É£ Main (philo.c)

```
main()
  ‚îú‚îÄ‚îÄ memset(&philo, 0, sizeof(t_vars))
  ‚îú‚îÄ‚îÄ init_philo()        ‚Üí Parsing e inicializa√ß√£o
  ‚îú‚îÄ‚îÄ create_threads()    ‚Üí Cria N threads (uma por fil√≥sofo)
  ‚îú‚îÄ‚îÄ monitor_philos()    ‚Üí Loop de monitoramento (main thread)
  ‚îú‚îÄ‚îÄ join_threads()      ‚Üí Aguarda todas as threads terminarem
  ‚îî‚îÄ‚îÄ destroyer()         ‚Üí Libera mutexes
```

### 2Ô∏è‚É£ Inicializa√ß√£o (init.c)

```
init_philo()
  ‚îú‚îÄ‚îÄ Valida argumentos (5 ou 6)
  ‚îú‚îÄ‚îÄ check_numbers()     ‚Üí Apenas d√≠gitos positivos?
  ‚îú‚îÄ‚îÄ Parseia argumentos (ft_atoi)
  ‚îú‚îÄ‚îÄ check_limits()      ‚Üí Valores dentro dos limites?
  ‚îú‚îÄ‚îÄ init_vars()         ‚Üí Inicializa vari√°veis globais
  ‚îÇ     ‚îî‚îÄ‚îÄ last_meal = start_time para TODOS
  ‚îî‚îÄ‚îÄ philos_start()      ‚Üí Configura mutexes e ponteiros
        ‚îú‚îÄ‚îÄ Cria mutex l_fork para cada fil√≥sofo
        ‚îî‚îÄ‚îÄ r_fork aponta para l_fork do pr√≥ximo (circular)
```

### 3Ô∏è‚É£ Thread do Fil√≥sofo (philosophing.c)

```
philosophing()
  ‚îú‚îÄ‚îÄ Caso especial: 1 fil√≥sofo
  ‚îÇ     ‚îî‚îÄ‚îÄ ft_one_philo() ‚Üí pega 1 garfo e aguarda morte
  ‚îÇ
  ‚îú‚îÄ‚îÄ ft_waitphilo() ‚Üí Delay para fil√≥sofos pares (10ms)
  ‚îÇ
  ‚îî‚îÄ‚îÄ Loop infinito (while ft_checker_full_death):
        ‚îú‚îÄ‚îÄ ft_take_forks()
        ‚îÇ     ‚îú‚îÄ‚îÄ Par:   r_fork ‚Üí l_fork
        ‚îÇ     ‚îî‚îÄ‚îÄ √çmpar: l_fork ‚Üí r_fork
        ‚îÇ
        ‚îú‚îÄ‚îÄ ft_philo_eat()
        ‚îÇ     ‚îú‚îÄ‚îÄ meal_nbr++
        ‚îÇ     ‚îú‚îÄ‚îÄ last_meal = now
        ‚îÇ     ‚îú‚îÄ‚îÄ print "is eating"
        ‚îÇ     ‚îú‚îÄ‚îÄ ft_usleep(t_2eat)
        ‚îÇ     ‚îî‚îÄ‚îÄ unlock forks
        ‚îÇ
        ‚îî‚îÄ‚îÄ ft_philo_sleep_think()
              ‚îú‚îÄ‚îÄ print "is sleeping"
              ‚îú‚îÄ‚îÄ ft_usleep(t_2sleep)
              ‚îî‚îÄ‚îÄ print "is thinking"
```

### 4Ô∏è‚É£ Monitoramento (checker.c + philo.c)

```
monitor_philos() [main thread]
  ‚îî‚îÄ‚îÄ Loop infinito:
        ‚îú‚îÄ‚îÄ ft_checker_philos(philo, &i)
        ‚îÇ     ‚îú‚îÄ‚îÄ checker_death()
        ‚îÇ     ‚îÇ     ‚îî‚îÄ‚îÄ (now - last_meal) > t_2die?
        ‚îÇ     ‚îÇ           ‚îú‚îÄ‚îÄ Yes: philo_dead = true, print "died"
        ‚îÇ     ‚îÇ           ‚îî‚îÄ‚îÄ No: continua
        ‚îÇ     ‚îÇ
        ‚îÇ     ‚îî‚îÄ‚îÄ checker_full()
        ‚îÇ           ‚îî‚îÄ‚îÄ how_many_r_full == n_philos?
        ‚îÇ                 ‚îî‚îÄ‚îÄ Yes: philos_full = true
        ‚îÇ
        ‚îú‚îÄ‚îÄ i++ (pr√≥ximo fil√≥sofo)
        ‚îú‚îÄ‚îÄ if (i >= n_philos) ‚Üí i = 0
        ‚îî‚îÄ‚îÄ usleep(100) ‚Üí evita 100% CPU
```

---

## üîê Sincroniza√ß√£o e Mutexes

### Mutexes Utilizados

1. **`l_fork` (um por fil√≥sofo)**
   - Representa o garfo f√≠sico
   - Deve ser locked antes de usar o garfo
   - Shared entre dois fil√≥sofos adjacentes

2. **`sync` (global)**
   - Protege vari√°veis compartilhadas:
     - `philo_dead`, `philos_full`
     - `how_many_r_full`
     - `last_meal`, `meal_nbr`
   - Usado para imprimir mensagens atomicamente

### Regras de Locking

#### ‚úÖ CORRETO
```c
pthread_mutex_lock(&philo->sync);
// Acessa vari√°veis compartilhadas
pthread_mutex_unlock(&philo->sync);
```

#### ‚ùå INCORRETO (Data Race)
```c
if (philo->philo_dead)  // L√™ sem lock!
    return;
```

#### ‚úÖ Ordem de Locking (evita deadlock)
```c
// Fil√≥sofos PARES
lock(r_fork);  // Garfo direito primeiro
lock(l_fork);  // Depois esquerdo

// Fil√≥sofos √çMPARES
lock(l_fork);  // Garfo esquerdo primeiro
lock(r_fork);  // Depois direito
```

---

## üêõ Problemas Comuns e Solu√ß√µes

### 1. Deadlock

**Problema**: Todos pegam o garfo esquerdo ‚Üí ningu√©m consegue o direito

**Solu√ß√£o**: Ordem diferente para pares/√≠mpares
```c
if (philo_nbr % 2 == 0)
    lock(r_fork) ‚Üí lock(l_fork)  // Pares
else
    lock(l_fork) ‚Üí lock(r_fork)  // √çmpares
```

### 2. Data Race em `last_meal`

**Problema**:
```c
// Thread A (monitor): l√™ last_meal
if (now - philo->last_meal > t_2die)

// Thread B (philo): escreve last_meal
philo->last_meal = ft_time_ms();
```

**Solu√ß√£o**: Sempre usar mutex
```c
pthread_mutex_lock(&vars->sync);
philo->last_meal = ft_time_ms();
pthread_mutex_unlock(&vars->sync);
```

### 3. Mensagens Ap√≥s Morte

**Problema**: Fil√≥sofo imprime "is eating" depois de outro morrer

**Solu√ß√£o**: Verificar `philo_dead` antes de imprimir
```c
bool ft_checker_message(t_data *philo, char *str)
{
    pthread_mutex_lock(&philo->vars->sync);
    if (philo->vars->philo_dead || philo->vars->philos_full)
    {
        pthread_mutex_unlock(&philo->vars->sync);
        return (false);  // N√£o imprime
    }
    printf("%lu %d %s\n", timestamp, id, str);
    pthread_mutex_unlock(&philo->vars->sync);
    return (true);
}
```

### 4. Mutexes N√£o Liberados

**Problema**: Lock sem unlock ‚Üí deadlock permanente

**Solu√ß√£o**: Sempre fazer unlock em todos os caminhos
```c
pthread_mutex_lock(r_fork);
if (error_condition)
{
    pthread_mutex_unlock(r_fork);  // ‚úÖ Libera antes de retornar
    return (false);
}
pthread_mutex_lock(l_fork);
// ... usar garfos ...
pthread_mutex_unlock(l_fork);
pthread_mutex_unlock(r_fork);
```

---

## üß™ Testes Importantes

### Teste 1: Ningu√©m deve morrer
```bash
./philo 5 800 200 200
```
- 5 fil√≥sofos
- 800ms para morrer
- 200ms para comer
- 200ms para dormir

**Resultado esperado**: Loop infinito, ningu√©m morre

### Teste 2: Fil√≥sofo deve morrer
```bash
./philo 4 310 200 100
```
- 4 fil√≥sofos
- 310ms para morrer
- 200ms para comer
- 100ms para dormir

**Resultado esperado**: Um fil√≥sofo morre ap√≥s ~310ms

### Teste 3: Todos comem X vezes
```bash
./philo 5 800 200 200 7
```
- 5 fil√≥sofos
- Cada um deve comer 7 vezes

**Resultado esperado**: "Every philosopher has eaten 7 times"

### Teste 4: Um fil√≥sofo s√≥
```bash
./philo 1 800 200 200
```
**Resultado esperado**: 
```
0 1 has taken a fork
800 1 died
```

### Teste 5: Estresse (muitos fil√≥sofos)
```bash
./philo 200 800 200 200
```
**Resultado esperado**: Funciona sem crash

---

## üìä Timing e Precis√£o

### `ft_usleep()` Inteligente
```c
void ft_usleep(uint64_t time, t_data *philo_x)
{
    uint64_t now = ft_time_ms();
    
    while (ft_time_ms() - now < time && !someone_dead(philo_x))
    {
        usleep(150);  // Sleep curto, verifica frequentemente
    }
}
```

**Por que n√£o `usleep(time * 1000)`?**
- Precisamos verificar `someone_dead` frequentemente
- `usleep()` pode dormir mais que o pedido
- Loop com sleeps curtos = mais responsivo

---

## üéØ Checklist Final

### Funcionalidades
- [ ] Parsing de argumentos correto
- [ ] Valida√ß√£o de limites (1-200 philos, times > 60ms)
- [ ] Inicializa√ß√£o de mutexes
- [ ] Cria√ß√£o de threads
- [ ] Loop de monitoramento
- [ ] Detec√ß√£o de morte (within 10ms)
- [ ] Detec√ß√£o de conclus√£o (todos comeram N vezes)
- [ ] Caso especial: 1 fil√≥sofo
- [ ] Destrui√ß√£o de mutexes
- [ ] Sem memory leaks

### Sincroniza√ß√£o
- [ ] Sem data races
- [ ] Sem deadlocks
- [ ] Ordem correta de locks (par/√≠mpar diferente)
- [ ] Mensagens n√£o impressas ap√≥s morte
- [ ] `last_meal` atualizado com mutex

### Edge Cases
- [ ] 1 fil√≥sofo funciona
- [ ] 200 fil√≥sofos funciona
- [ ] Tempos muito curtos (60ms)
- [ ] max_rounds = 1
- [ ] max_rounds = -1 (infinito)

---

## üîß Compila√ß√£o e Execu√ß√£o

### Compilar
```bash
cc -Wall -Wextra -Werror -pthread *.c -o philo
```

### Executar
```bash
./philo <n_philos> <t_die> <t_eat> <t_sleep> [max_meals]
```

### Exemplos
```bash
# Deve rodar indefinidamente
./philo 5 800 200 200

# Um deve morrer
./philo 4 310 200 100

# Todos comem 7 vezes
./philo 5 800 200 200 7
```

---

## üìù Resumo das Corre√ß√µes Feitas

### `init.c`
‚úÖ **Antes**: S√≥ inicializava `philosophers[0].last_meal`  
‚úÖ **Depois**: Loop inicializa TODOS os fil√≥sofos

### `philo.c`
‚úÖ **Antes**: Loop de monitoramento confuso com `i = i + 0`  
‚úÖ **Depois**: Loop claro com reset manual `if (i >= n) i = 0`

### `philosophing.c`
‚úÖ **Antes**: Verifica√ß√µes ap√≥s locks (perigoso)  
‚úÖ **Depois**: Verifica√ß√µes antes de tentar pegar garfos

‚úÖ **Antes**: Unlocks incompletos em caso de erro  
‚úÖ **Depois**: Sempre libera todos os mutexes adquiridos

### `utils_philo.c`
‚úÖ **Antes**: `ft_one_philo` s√≥ imprimia, n√£o esperava  
‚úÖ **Depois**: Espera `t_2die` antes de terminar

---

## üéì Conceitos Aprendidos

1. **Threads**: Execu√ß√£o paralela de c√≥digo
2. **Mutexes**: Prote√ß√£o de recursos compartilhados
3. **Deadlock**: Como evitar com ordena√ß√£o consistente
4. **Data Races**: Import√¢ncia de locks em acessos compartilhados
5. **Atomicidade**: Opera√ß√µes que n√£o podem ser interrompidas
6. **Critical Sections**: Trechos de c√≥digo que devem ser protegidos

---

## üí° Dicas Extras

### Debug com prints
```c
printf("[DEBUG] Philo %d: trying to lock r_fork\n", id);
pthread_mutex_lock(r_fork);
printf("[DEBUG] Philo %d: r_fork locked\n", id);
```

### Valgrind para data races
```bash
valgrind --tool=helgrind ./philo 5 800 200 200
```

### Verificar leaks
```bash
valgrind --leak-check=full ./philo 5 800 200 200 7
```

### Teste de longa dura√ß√£o
```bash
./philo 5 800 200 200 &
PID=$!
sleep 60  # Roda por 1 minuto
kill $PID
```

---

## üèÜ Conclus√£o

O projeto Philosophers √© uma excelente introdu√ß√£o a:
- Programa√ß√£o concorrente
- Sincroniza√ß√£o de threads
- Problemas cl√°ssicos de concorr√™ncia
- Debugging de race conditions

Agora voc√™ tem uma implementa√ß√£o completa e corrigida! üéâ